setwd("~/GitHub/BINF5503_DataAnalysis_Group3")
# DAS Assignment 2 - RNA-Seq Differential Expression Analysis
# Load Required Libraries
library(tidyverse)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(clusterProfiler)
library(org.Hs.eg.db)
library(biomaRt)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(cowplot)
# Download and read in the data
bCancer <- read_csv("")
setwd("~/GitHub/Shiny App")
# Download and read in the data
bCancer <- read_csv("breast_cancer_wisconsin_diagnostic")
# Download and read in the data
bCancer <- read_csv("")
# Download and read in the data
bCancer <- read_csv("breast_cancer_wisconsin_diagnostic.csv")
head(bCancer)
ggplot(bCancer, aes(x = smoothness_mean)) +
geom_histogram()
smoothness_q <- quantile(bCancer$smoothness_mean)
smoothness_q
# Create improved plot with quantiles
ggplot(bCancer, aes(x = smoothness_mean_cat, y = radius_mean, fill = smoothness_mean_cat)) +
geom_boxplot(outlier.shape = NA) +
stat_boxplot(geom = "errorbar") +
geom_jitter(width = 0.2, height = 0) +
theme_classic()
# mutate new column "smoothness_mean_cat" based on "smoothness_mean"
bCancer <- bCancer %>%
mutate(smoothness_mean_cat = cut(smoothness_mean,
breaks = c(-Inf, smoothness_q["25%"], smoothness_q["50%"], smoothness_q["75%"], Inf),
labels = c("veryLow", "low", "high", "veryHigh")))
table(bCancer$smoothness_mean_cat)
ggplot(bCancer, aes(x = smoothness_mean_cat, y = radius_mean, fill = smoothness_mean_cat)) +
geom_boxplot(outlier.shape = NA) +
stat_boxplot(geom = "errorbar") +
geom_jitter(width = 0.2, height = 0) +
theme_classic()
ggplot(bCancer, aes(x = smoothness_mean_cat, y = radius_mean, fill = smoothness_mean_cat)) +
geom_boxplot(outlier.shape = NA) +
stat_boxplot(geom = "errorbar") +
geom_jitter(width = 0.2, height = 0) +
theme_classic()
y_variable <- "radius_mean"
# Use "y_variable" in a boxplot
textOfFormula <- paste0("texture_mean = ",
round(fit_bc$coefficients[1], 2),
" + ",
round(fit_bc$coefficients[2], 2),
"*",
names(fit_bc$coefficients[2])
)
# Fit the linear model
fit_bc <- lm(texture_mean ~ radius_mean, bCancer)
textOfFormula <- paste0("texture_mean = ",
round(fit_bc$coefficients[1], 2),
" + ",
round(fit_bc$coefficients[2], 2),
"*",
names(fit_bc$coefficients[2])
)
message("The formula to model ",
names(fit_bc$coefficients[2]),
" is: ",
textOfFormula
)
# Generate a message that says "The intercept is: ___"
# Generate a message that says "The slope of ___ is ___"
# Create formula text dynamically
textOfFormula <- paste0("texture_mean = ",
round(fit_bc$coefficients[1], 2),
" + ",
round(fit_bc$coefficients[2], 2),
"*",
names(fit_bc$coefficients[2])
)
# Display the formula message
message("The formula to model ",
names(fit_bc$coefficients[2]),
" is: ",
textOfFormula
)
# Generate a message about the intercept
message("The intercept is: ", round(fit_bc$coefficients[1], 2))
# Generate a message about the slope
message("The slope of ", names(fit_bc$coefficients[2]), " is ", round(fit_bc$coefficients[2], 2))
# Generate a message that says "The intercept is: ___"
# Generate a message that says "The slope of ___ is ___"
# Create formula text dynamically
textOfFormula <- paste0("texture_mean = ",
round(fit_bc$coefficients[1], 2),
" + ",
round(fit_bc$coefficients[2], 2),
"*",
names(fit_bc$coefficients[2])
)
# Display the formula message
message(paste0("The formula to model ", names(fit_bc$coefficients[2]), " is: ", textOfFormula))
# Generate a message about the intercept
message(paste0("The intercept is: ", round(fit_bc$coefficients[1], 2)))
# Generate a message about the slope
message(paste0("The slope of ", names(fit_bc$coefficients[2]), " is ", round(fit_bc$coefficients[2], 2)))
# Generate a message that says "The intercept is: ___"
# Generate a message that says "The slope of ___ is ___"
ggplot(bCancer, aes(x = radius_mean, y = texture_mean)) +
geom_point(alpha = 0.4) +
# the line
geom_abline(intercept = fit_bc$coefficients[1],
slope = fit_bc$coefficients[2],
colour = "green4",
size = 1) +
# the equation of the line
ggtitle(textOfFormula) +
theme(plot.title = element_text(colour = "green4"))
ggplot(bCancer, aes(x = radius_mean, y = texture_mean)) +
geom_point(alpha = 0.4) +
# the line
geom_abline(intercept = fit_bc$coefficients[1],
slope = fit_bc$coefficients[2],
colour = "green4",
size = 1) +
# the equation of the line
ggtitle(textOfFormula) +
theme_classic()
theme(plot.title = element_text(colour = "green4"))
# Set up variable objects
depVariable <- "radius_mean"
indepVariableOptions <- colnames(bCancer)[c(3:6, 8:13)]
indepVariable <- indepVariableOptions[7]
# Set up formula for running LM
formulaLM <- as.formula(paste(depVariable, indepVariable, sep = " ~ "))
# Execute
fit1 <- lm(formulaLM, data = bCancer)
summary(fit1)
lmFunction <- function(selectedIndepVariable, selectedDepVariable) {
# Fit the linear model
fit <- lm(.data[[selectedDepVariable]] ~ .data[[selectedIndepVariable]], data = bCancer)
# Print summary of the model
message("Summary of the Linear Model:")
print(summary(fit))
# Create scatterplot with regression line
ggplot(bCancer, aes(x = .data[[selectedIndepVariable]], y = .data[[selectedDepVariable]])) +
geom_point(alpha = 0.5, color = "blue") +  # Scatterplot points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Regression line
labs(title = paste0("Scatterplot: ", selectedDepVariable, " vs ", selectedIndepVariable),
x = selectedIndepVariable,
y = selectedDepVariable) +
theme_minimal()
}
lmFunction <- function(selectedIndepVariable, selectedDepVariable) {
# Fit the linear model
fit <- lm(.data[[selectedDepVariable]] ~ .data[[selectedIndepVariable]], data = bCancer)
# Print summary of the model
message("Summary of the Linear Model:")
print(summary(fit))
# Create scatterplot with regression line
ggplot(bCancer, aes(x = .data[[selectedIndepVariable]], y = .data[[selectedDepVariable]])) +
geom_point(alpha = 0.5, color = "blue") +  # Scatterplot points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Regression line
labs(title = paste0("Scatterplot: ", selectedDepVariable, " vs ", selectedIndepVariable),
x = selectedIndepVariable,
y = selectedDepVariable) +
theme_minimal()
}
lmFunction("radius_mean", "texture_mean")
lmFunction <- function(selectedIndepVariable, selectedDepVariable) {
}
lmFunction <- function(selectedIndepVariable, selectedDepVariable) {
# Fit the linear model
formulaLM <- as.formula(paste(selectedDepVariable, selectedIndepVariable, sep = " ~ "))
fit <- lm(formulaLM, data = bCancer)
# Print summary of the model
message("Summary of the Linear Model:")
print(summary(fit))
# Create formula text dynamically
textOfFormula <- paste0(selectedDepVariable, " = ",
round(fit$coefficients[1], 2),
" + ",
round(fit$coefficients[2], 2),
"*",
selectedIndepVariable)
# Display the formula message
message(paste0("The formula to model ", selectedDepVariable, " is: ", textOfFormula))
# Generate a message about the intercept
message(paste0("The intercept is: ", round(fit$coefficients[1], 2)))
# Generate a message about the slope
message(paste0("The slope of ", selectedIndepVariable, " is ", round(fit$coefficients[2], 2)))
# Scatterplot with regression line
ggplot(bCancer, aes(x = .data[[selectedIndepVariable]], y = .data[[selectedDepVariable]])) +
geom_point(alpha = 0.5, color = "blue") +  # Scatterplot points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Regression line
ggtitle(textOfFormula) +
theme_minimal()
}
# Example usage
lmFunction("radius_mean", "texture_mean")
lmFunction <- function(selectedIndepVariable, selectedDepVariable) {
# Set up formula for running LM
formulaLM <- as.formula(paste(selectedDepVariable, selectedIndepVariable, sep = " ~ "))
# Execute the linear model
fit <- lm(formulaLM, data = bCancer)
summary(fit)  # Print model summary
# Create formula text dynamically
textOfFormula <- paste0(selectedDepVariable, " = ",
round(fit$coefficients[1], 2),
" + ",
round(fit$coefficients[2], 2),
"*",
selectedIndepVariable)
# Display the formula message
message(paste0("The formula to model ", selectedDepVariable, " is: ", textOfFormula))
# Generate a message about the intercept
message(paste0("The intercept is: ", round(fit$coefficients[1], 2)))
# Generate a message about the slope
message(paste0("The slope of ", selectedIndepVariable, " is ", round(fit$coefficients[2], 2)))
# Scatterplot with regression line
ggplot(bCancer, aes(x = .data[[selectedIndepVariable]], y = .data[[selectedDepVariable]])) +
geom_point(alpha = 0.5, color = "blue") +  # Scatterplot points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Regression line
ggtitle(textOfFormula) +
theme_minimal()
}
# Example usage
lmFunction("radius_mean", "texture_mean")
lmFunction  <- function(selectedIndepVariable, selectedDepVariable) {
# Copy and paste most of previous code chunks
# Set up formula for running LM
formulaLM <- as.formula(paste(selectedDepVariable, selectedIndepVariable, sep = " ~ "))
# Execute
fit_bc <- lm(formulaLM, data = bCancer)
#summary(fit)
# Text outputs
textOfFormula <- paste0("texture_mean = ",
round(fit_bc$coefficients[1], 2),
" + ",
round(fit_bc$coefficients[2], 2),
"*",
names(fit_bc$coefficients[2])
)
message("The formula to model ",
names(fit_bc$coefficients[2]),
" is: ",
textOfFormula)
# Generate a message that says "The intercept is: ___"
message(paste0("The intercept is: ", round(fit_bc$coefficients[1], 2)))
# Generate a message that says "The slope of ___ is ___"
message(paste0("The slope of ",
names(fit_bc$coefficients[2]),
" is ",
round(fit_bc$coefficients[2], 2)))
# ggplot output
ggplot(bCancer, aes(x = radius_mean, y = texture_mean)) +
geom_point(alpha = 0.4) +
# the line
geom_abline(intercept = fit_bc$coefficients[1],
slope = fit_bc$coefficients[2],
colour = "green4",
linewidth = 1) +
# the equation of the line
ggtitle(textOfFormula) +
theme_classic() +
theme(plot.title = element_text(colour = "green4"))
}
# Example usage
lmFunction("radius_mean", "texture_mean")
lmFunction <- function(selectedIndepVariable, selectedDepVariable) {
# Copy and paste most of previous code chunks
# Set up formula for running LM
formulaLM <- as.formula(paste(selectedDepVariable, selectedIndepVariable, sep = " ~ "))
# Execute
fit_bc <- lm(formulaLM, data = bCancer)
#summary(fit_bc)
# Text outputs
textOfFormula <- paste0(selectedDepVariable, " = ",
round(fit_bc$coefficients[1], 2),
" + ",
round(fit_bc$coefficients[2], 2),
"*",
names(fit_bc$coefficients[2])
)
message("The formula to model ",
names(fit_bc$coefficients[2]),
" is: ",
textOfFormula)
# Generate a message that says "The intercept is: ___"
message(paste0("The intercept is: ", round(fit_bc$coefficients[1], 2)))
# Generate a message that says "The slope of ___ is ___"
message(paste0("The slope of ",
names(fit_bc$coefficients[2]),
" is ",
round(fit_bc$coefficients[2], 2)))
# ggplot output
ggplot(bCancer, aes(x = .data[[selectedIndepVariable]], y = .data[[selectedDepVariable]])) +
geom_point(alpha = 0.4) +
# the line
geom_abline(intercept = fit_bc$coefficients[1],
slope = fit_bc$coefficients[2],
colour = "green4",
linewidth = 1) +
# the equation of the line
ggtitle(textOfFormula) +
theme_classic() +
theme(plot.title = element_text(colour = "green4"))
}
# Example usage:
lmFunction("radius_mean", "texture_mean")
# Example usage
lmFunction("radius_mean", "texture_mean")
lmFunction <- function(selectedIndepVariable, selectedDepVariable) {
# Copy and paste most of previous code chunks
# Set up formula for running LM
formulaLM <- as.formula(paste(selectedDepVariable, selectedIndepVariable, sep = " ~ "))
# Execute
fit_bc <- lm(formulaLM, data = bCancer)
#summary(fit_bc)
# Text outputs
textOfFormula <- paste0(selectedDepVariable, " = ",
round(fit_bc$coefficients[1], 2),
" + ",
round(fit_bc$coefficients[2], 2),
"*",
names(fit_bc$coefficients[2])
)
message("The formula to model ",
names(fit_bc$coefficients[2]),
" is: ",
textOfFormula)
# Generate a message that says "The intercept is: ___"
message(paste0("The intercept is: ", round(fit_bc$coefficients[1], 2)))
# Generate a message that says "The slope of ___ is ___"
message(paste0("The slope of ",
names(fit_bc$coefficients[2]),
" is ",
round(fit_bc$coefficients[2], 2)))
# ggplot output
ggplot(bCancer, aes(x = .data[[selectedIndepVariable]], y = .data[[selectedDepVariable]])) +
geom_point(alpha = 0.4) +
# the line
geom_abline(intercept = fit_bc$coefficients[1],
slope = fit_bc$coefficients[2],
colour = "green4",
linewidth = 1) +
# the equation of the line
ggtitle(textOfFormula) +
theme_classic() +
theme(plot.title = element_text(colour = "green4"))
}
# Example usage:
lmFunction("radius_mean", "texture_mean")
# Example usage:
lmFunction("radius_mean", "texture_mean")
histFunction <- function(variable) {
ggplot(bCancer, aes(x = .data[[variable]])) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = paste0("Histogram of ", variable),
x = variable,
y = "Count") +
theme_minimal()
}
# Example usage
histFunction("radius_mean")
histFunction("texture_mean")
histFunction <- function(variable) {
ggplot() +
geom_histogram(aes(x = bCancer[[variable]]), binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = paste0("Histogram of ", variable),
x = variable,
y = "Count") +
theme_minimal()
}
# Example usage
histFunction("radius_mean")
histFunction("texture_mean")
